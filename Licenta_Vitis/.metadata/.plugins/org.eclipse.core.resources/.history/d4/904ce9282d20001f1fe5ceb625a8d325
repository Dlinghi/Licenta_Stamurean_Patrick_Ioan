#include "xparameters.h"
#include "xil_io.h"
#include "xil_printf.h"
#include "xil_exception.h"
#include "xscugic.h"
#include "xtmrctr.h"
#include "axi_traffic_gen.h"
#include "axi_dma.h"
#include "axi_gpio.h"
#include "xgpio.h"

// Buffer size
#define BUFFER_SIZE 1024
#define PATTERN 0xA5A5A5A5
#define DMA_BUFFER_BASE (XPAR_PS7_DDR_0_S_AXI_BASEADDR + 0x01000000)  // Adjust the address according to your system

// Timer and GPIO device IDs
#define AXI_TIMER_DEVICE_ID XPAR_AXI_TIMER_0_DEVICE_ID
#define AXI_GPIO_1_DEVICE_ID XPAR_AXI_GPIO_1_DEVICE_ID

// Interrupt ID
#define TIMER_INTERRUPT_ID XPAR_FABRIC_AXI_TIMER_0_INTERRUPT_INTR

// Instances
XTmrCtr TimerInstance;
XGpio GpioInstance;
XGpio GpioInstance1;  // GPIO instance for axi_gpio_1
XScuGic InterruptController;

// Global variable to track the time
volatile u32 TimeInSeconds = 0;

// Function prototypes
void Timer_Intr_Handler(void *CallBackRef);
int SetupInterruptSystem(XScuGic *IntcInstancePtr, XTmrCtr *TimerInstancePtr);

void start_traffic_gen() {
    xil_printf("Starting AXI Traffic Generator...\n");
    AXI_TrafficGen_SetPattern(AXI_TRAFFIC_GEN_BASEADDR, PATTERN);
    AXI_TrafficGen_Start(AXI_TRAFFIC_GEN_BASEADDR);
}

void transfer_data(XAxiDma *AxiDmaInstance, u32 *buffer) {
    xil_printf("Transferring data from Traffic Generator to FIFO via DMA...\n");
    int Status = AXI_DMA_S2MM_Transfer(AxiDmaInstance, (u32)buffer, BUFFER_SIZE * sizeof(u32));
    if (Status != XST_SUCCESS) {
        xil_printf("DMA S2MM transfer failed\n");
        return;
    }

    // Wait for the transfer to complete
    while (XAxiDma_Busy(AxiDmaInstance, XAXIDMA_DEVICE_TO_DMA));

    xil_printf("Transfer complete. Data in buffer: ");
    for (int i = 0; i < BUFFER_SIZE; i++) {
        xil_printf("%08X ", buffer[i]);
    }
    xil_printf("\n");

    xil_printf("Stopping AXI Traffic Generator...\n");
    AXI_TrafficGen_Stop(AXI_TRAFFIC_GEN_BASEADDR);
}

void wait_for_button_press() {
    xil_printf("Waiting for button press to restart traffic generator...\n");
    while (1) {
        if (AXI_GPIO_Read(&GpioInstance) & 0x01) {  // Check if button 0 is pressed
            xil_printf("Button pressed, restarting traffic generator...\n");
            break;
        }
    }
}

int main() {
    XAxiDma AxiDmaInstance;
    int Status;
    u32 *buffer = (u32 *)DMA_BUFFER_BASE;

    xil_printf("Initializing AXI DMA...\n");
    Status = AXI_DMA_Init(&AxiDmaInstance);
    if (Status != XST_SUCCESS) {
        xil_printf("AXI DMA initialization failed\n");
        return XST_FAILURE;
    }

    xil_printf("Initializing AXI GPIO 0...\n");
    Status = AXI_GPIO_Init(&GpioInstance);
    if (Status != XST_SUCCESS) {
        xil_printf("AXI GPIO 0 initialization failed\n");
        return XST_FAILURE;
    }

    xil_printf("Initializing AXI GPIO 1...\n");
    Status = AXI_GPIO_1_Init(&GpioInstance1);
