#include "xparameters.h"
#include "xil_io.h"
#include "xil_printf.h"
#include "axi_traffic_gen.h"
#include "axi_dma.h"

// Buffer size
#define BUFFER_SIZE 1024
#define PATTERN 0xA5A5A5A5
#define DMA_BUFFER_BASE 0x40400000 // Adjust the address according to your system

int main() {
    XAxiDma AxiDmaInstance;
    int Status;
    u32 *buffer = (u32 *)DMA_BUFFER_BASE;

    xil_printf("Initializing AXI DMA...\n");
    Status = AXI_DMA_Init(&AxiDmaInstance);
    if (Status != XST_SUCCESS) {
        xil_printf("AXI DMA initialization failed\n");
        return XST_FAILURE;
    }

    xil_printf("Starting AXI Traffic Generator...\n");
    AXI_TrafficGen_SetPattern(AXI_TRAFFIC_GEN_BASEADDR, PATTERN);
    AXI_TrafficGen_Start(AXI_TRAFFIC_GEN_BASEADDR);

    xil_printf("Transferring data from Traffic Generator to FIFO via DMA...\n");
    Status = AXI_DMA_S2MM_Transfer(&AxiDmaInstance, (u32)buffer, BUFFER_SIZE * sizeof(u32));
    if (Status != XST_SUCCESS) {
        xil_printf("DMA S2MM transfer failed\n");
        return XST_FAILURE;
    }

    // Wait for the transfer to complete
    while (XAxiDma_Busy(&AxiDmaInstance, XAXIDMA_DEVICE_TO_DMA));

    xil_printf("Transfer complete. Data in buffer: ");
    for (int i = 0; i < BUFFER_SIZE; i++) {
        xil_printf("%08X ", buffer[i]);
    }
    xil_printf("\n");

    xil_printf("Stopping AXI Traffic Generator...\n");
    AXI_TrafficGen_Stop(AXI_TRAFFIC_GEN_BASEADDR);

    xil_printf("Done\n");
    return XST_SUCCESS;
}
